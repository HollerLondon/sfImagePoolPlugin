<?php
/**
 * PluginsfImagePoolImage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7380 2010-03-15 21:07:50Z jwage $
 */
abstract class PluginsfImagePoolImage extends BasesfImagePoolImage
{
    const DEFAULT_FILENAME = 'placeholder.png';
    
    // used by the sfImagePoolHelper
    const MISSING     = 'missing';
    const PLACEHOLDER = 'placeholder';
    
    public function setup()
    {
      parent::setup();
      
      if($this->option('tagging'))
      {
        if(!class_exists('Taggable'))
        {
          throw new sfPluginDependencyException("sfDoctrineActAsTaggable is required to use image pool tagging");
        }
    
        $taggable0 = new Taggable;
        if(!$taggable0 instanceof Doctrine_Template)
        {
          throw new sfPluginDependencyException("Taggable is not a Doctrine_Template");
        }
        $this->actAs($taggable0);
      }
    }
    
    /**
     *  
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this['original_filename'];
    }
    
    /**
     * Delete all image files associated with this record.
     */
    public function postDelete($event)
    {
        $image = $event->getInvoker();
        
        $search_root    = sfImagePoolPluginConfiguration::getBaseDir();
        $files_iterator = sfFinder::type('file')->name($image['filename'])->in($search_root);
        
        foreach($files_iterator as $f)
        {
            unlink($f);
        }
    }
    
    /**
     * @return string
     */
    public function getPathToOriginalFile()
    {
        return implode(DIRECTORY_SEPARATOR, array(
            sfImagePoolPluginConfiguration::getBaseDir(),
            $this['filename']
        ));
    }
    
    /**
     * Fetch the image width
     * @return integer 
     */
    public function getWidth()
    {
        if(empty($this->imageInfo))
        {
            $this->imageInfo = getimagesize($this->getPathToOriginalFile());
        }
        return $this->imageInfo[0];
    }

    /**
     * Fetch the image height
     * @return integer
     */
    public function getHeight()
    {
        if(empty($this->imageInfo))
        {
            $this->imageInfo = getimagesize($this->getPathToOriginalFile());
        }
        return $this->imageInfo[1];
    }

    /**
     * Return the relative URL to an image 
     * @return string URL to file
     * @deprecated 
     */
    public function getUrl($size = self::SIZE_O)
    {
        $file = $this->getPathToOriginalFile($size);
        $path = (file_exists($file)) ? '/uploads/images/' . $size . '/' . $this->getFilename() : '/images/placeholders/' . $size . '.png';
        return $path;
    }

    /**
     * @return mixed Boolean false or array containing count of which models use image.
     */
    public function isUsed()
    {
        $models     = array();
        $model_path = sfConfig::get('sf_lib_dir').DIRECTORY_SEPARATOR.'model';
        $all_models = Doctrine_Core::loadModels($model_path, Doctrine_Core::MODEL_LOADING_CONSERVATIVE);
        
        foreach($all_models as $class)
        {
            // filter out Base and Table classes
            if(!strstr($class, 'Base') && !strstr($class, 'Table'))
            {
                // check for presence of sfImagePoolable behaviour
                if( Doctrine_Core::getTable($class)->hasTemplate('sfImagePoolable'))
                {
                    $models[$class] = Doctrine_Core::getTable('sfImagePoolLookup')
                        ->createQuery()
                        ->where('imaged_model = ?', $class)
                        ->count();
                }
            }
        }        
        
        if(!count($models))
        {
            return false;
        }
        
        return $models;
    }
    
    /**
     * @return sfImagePoolImage
     */
    static public function getDefaultImage()
    {
        $i              = new sfImagePoolImage();
        $i['filename']  = self::DEFAULT_FILENAME;
        $i['mime_type'] = 'image/png';
        
        return $i;
    }
}